name: regexp
comment: 正規表現でパターンマッチを行い、マッチングの判定およびマッチグループの抽出をおこないます。
parameters: # パラメータの仕様を記述します
  target_key:
    type: string
    comment: 正規表現のマッチングを行うキーを指定します
    require: yes
    default: line

  pattern:
    type: string
    comment: 正規表現パターンを記述
    require: yes
    default: .+

  match_options:
    type: list
    comment: 正規表現の検索オプションを指定します。
    require: no
    default:
      - verbose
      - multiline
      - dotall

  match_result_key:
    type: string
    comment: マッチング結果(bool)を格納するキー名を指定します。
    require: no
    default: match_result

  extract_type:
    type: enum
    comment: |
      マッチグループの抽出タイプ
      index: グループ番号: フィールド名
      dict: 正規表現についているパターン名から取得
    values:
      - index
      - dict
    require: yes
    default: index

  group_key_map:
    type: dict
    comment: |
      group_extract_typeがindexの時の設定
      マッチンググループの値をキーに格納する
    require: no
    default:
      key1: 1
      key3: 3

  skip_unmatch:
    type: bool
    comment: 正規表現にマッチしなかった場合は、行出力をスキップするか？
    require: no
    default: yes

  output_keys:
    type: dict
    comment: 出力するカラムを指定する。デフォルト値も指定
    require: yes
    default:
      key1: default
      key2: default
      key3: default

sample:
  - type: regexp
    comment: 正規表現でマッチした結果を行に追加する
    debug: no
    parameters:
      # 正規表現パターン
      pattern: ^.+(?P<taketomi>竹富)(?P<machi>町)$
      # 検索対象の文字列が入っているキーを指定
      target_key: addr5
      # アンマッチはスキップする
      skip_unmatch: no
      # 検索オプション
      match_options:
        - verbose
        - multiline
        - dotall
        - ignorecase
      # マッチした結果(True/False)を格納するキー
      match_result_key: is_竹富町
      # グループの抽出タイプ
      # グループインデックスを指定して抽出
      extract_type: index
      # グループのパターン名をキーとして抽出
      # extract_type: dict

      # extract_type: indexの時の、グループインデックスと、キー名のマップ
      group_key_map:
        # グループ1の値を、taketomiに格納
        taketomi: 1
        # グループ2の値を、machiに格納
        machi: 2
      # 出力するキーとデフォルト
      output_keys:
        rule_name: 竹富町
        taketomi: "<empty>"
        machi: "<empty>"
